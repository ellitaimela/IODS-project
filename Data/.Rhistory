install.packages("devtools")
devtools::install_github("Vilivanh/vayrynen")
library(vayrynen)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(vayrynen)
# Setting the working directory
setwd("/Users/ellitaimela/Documents/Github/IODS-project/Data")
# Reading the csv files
math <- read.csv("student-mat.csv", sep=",")
por <- read.csv("student-por.csv", sep=",")
# Setting the working directory
setwd("/Users/ellitaimela/Documents/Github/IODS-project/Data")
# Reading the csv files
math <- read.csv("student-mat.csv", sep=",")
por <- read.csv("student-por.csv", sep=",")
# Checking the data, and the structure, dimensions and summary of the data
MATH
# Checking the data, and the structure, dimensions and summary of the data
math
# Reading the csv files
math <- read.csv("student-mat.csv", sep=";")
por <- read.csv("student-por.csv", sep=";")
# Checking the data, and the structure, dimensions and summary of the data
math
por
str(math)
dim(math)
summary(math)
por
str(por)
dim(por)
summary(por)
# common columns to use as identifiers
join_by <- c("school", "sex", "age", "address", "famsize", "Pstatus", "Medu",
"Fedu", "Mjob", "Fjob", "reason", "nursery","internet")
# join the two datasets by the selected identifiers
math_por <- inner_join(math, por, by = join_by, suffix = c(".math", ".por"))
# install.packages("dplyr")
library(dplyr)
# join the two datasets by the selected identifiers
math_por <- inner_join(math, por, by = join_by, suffix = c(".math", ".por"))
# see the new column names
colnames(math_por)
# see the new column names
colnames(math_por)
# see the new column names
math_por
colnames(math_por)
str(math_por)
dim(math_por)
summary(math_por)
# create a new data frame with only the joined columns
alc <- select(math_por, one_of(join_by))
# the columns in the datasets which were not used for joining the data
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
# print out the columns not used for joining
notjoined_columns
# for every column name not used for joining...
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
# glimpse at the new combined data
glimpse(alc)
# define a new column alc_use by combining weekday and weekend alcohol use
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
# define a new logical column 'high_use'
alc <- mutate(alc, high_use = alc_use > 2)
# glimpse at the new combined data
glimpse(alc)
# Writing a csv file of the dataset
write.csv(alc, file = "alc.csv")
# Reading the data
alc <- read.csv("alc.csv", sep=",")
# Checking the data, and the structures, dimensions and summaries of the datasets
alc
dim(alc)
summary(alc)
str(alc)
ggpairs(alc, lower = list(combo = wrap("facethist", bins = 20)))
library(dplyr)
library(ggplot2)
ggpairs(alc, lower = list(combo = wrap("facethist", bins = 20)))
library(GGally)
ggpairs(alc, lower = list(combo = wrap("facethist", bins = 20)))
cor(alc)
cor(factor(alc)
cor(factor(alc))
cor(factor(alc))
# produce summary statistics by group
alc %>% group_by(sex, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
View(alc)
View(alc)
# produce summary statistics by group
alc %>% group_by(sex, high_use) %>% summarise(count = n(), age = mean(age))
str(alc)
# produce summary statistics by group
alc %>% group_by(high_use) %>% summarise(count = n(), age = mean(age), medu = mean(Medu)
# produce summary statistics by group
alc %>% group_by(high_use) %>% summarise(count = n(), age = mean(age), medu = mean(Medu))
# produce summary statistics by group
alc %>% group_by(sex, high_use) %>% summarise(count = n(), age = mean(age), medu = mean(Medu))
# produce summary statistics by group
alc %>% group_by(sex, high_use) %>% summarise(count = n(), age = mean(age), medu = mean(Fedu))
# Plotting the distributions of the variables
boxplot(lrn14)
hist(alc$alc_use)
cor(alc$alc_use, alc)
cor(alc$alc_use, alc$age)
cor(alc$alc_use, alc$gender)
cor(alc$alc_use, alc$Fedu)
cor(alc$alc_use, alc$Medu)
cor(alc$alc_use, alc$Mjob)
library(tidyr)
install.packages("tidyr")
library(tidyr)
# glimpse at the alc data
glimpse(alc)
# use gather() to gather columns into key-value pairs and then glimpse() at the resulting data
gather(alc) %>% glimpse
# draw a bar plot of each variable
gather(alc) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
glimpse
# define the plot as a boxplot and draw it
g2 + geom_boxplot() + ylab("absences")
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("grade")
# initialise a plot of high_use and absences
g2 <- ggplot(alc, aes(x = high_use, y = absences))
# define the plot as a boxplot and draw it
g2 + geom_boxplot() + ylab("absences")
# initialize a plot of high_use and G3
g1 <- ggplot(alc, aes(x = high_use, y = G3))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("grade")
# initialise a plot of high_use and absences
g2 <- ggplot(alc, aes(x = high_use, y = absences))
# define the plot as a boxplot and draw it
g2 + geom_boxplot() + ylab("absences")
# Checking the data, and the structures, dimensions and summaries of the datasets
alc
str(alc)
# initialize a plot of high_use and sex
g1 <- ggplot(alc, aes(x = high_use, y = sex))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("grade")
library(ggplot2)
# initialize a plot of high_use and sex
g1 <- ggplot(alc, aes(x = high_use, y = sex))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("grade")
# initialize a plot of high_use and going out
g2 <- ggplot(alc, aes(x = high_use, y = goout))
# define the plot as a boxplot and draw it
g2 + geom_boxplot() + ylab("grade")
# initialize a plot of high_use and absences
g3 <- ggplot(alc, aes(x = high_use, y = absences))
# define the plot as a boxplot and draw it
g3 + geom_boxplot() + ylab("absences")
# initialize a plot of high_use and G3
g4 <- ggplot(alc, aes(x = high_use, y = G3))
# define the plot as a boxplot and draw it
g4 + geom_boxplot() + ylab("grade")
# initialize a plot of high_use and sex
g1 <- ggplot(alc, aes(x = high_use, y = sex))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("sex")
# define the plot as a boxplot and draw it
g1 + boxplot() + ylab("sex")
# initialize a plot of high_use and sex
g1 <- ggplot(alc, aes(x = high_use, y = sex))
# define the plot as a boxplot and draw it
g1 + boxplot() + ylab("sex")
# initialize a plot of high_use and internet
g1 <- ggplot(alc, aes(x = high_use, y = internet))
# define the plot as a boxplot and draw it
g1 + boxplot + ylab("sex")
# define the plot as a boxplot and draw it
g1 + geom_boxplot()  + ylab("sex")
# initialize a plot of high_use and going out
g2 <- ggplot(alc, aes(x = high_use, y = goout))
# define the plot as a boxplot and draw it
g2 + geom_boxplot() + ylab("going out")
# initialize a plot of high_use and internet
g1 <- ggplot(alc, aes(x = high_use, y = goout))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("sex")
# initialize a plot of high_use and internet
g1 <- ggplot(alc, aes(x = high_use, y = famrel))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("sex")
# initialize a plot of high_use and internet
g1 <- ggplot(alc, aes(x = high_use, y = hegher))
# initialize a plot of high_use and internet
g1 <- ggplot(alc, aes(x = high_use, y = higher))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("sex")
# initialize a plot of high_use and internet
g1 <- ggplot(alc, aes(x = high_use, y = age))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("sex")
# initialize a plot of high_use and internet
g1 <- ggplot(alc, aes(x = high_use, y = health))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("sex")
# initialize a plot of high_use and internet
g1 <- ggplot(alc, aes(x = high_use, y = Medu))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("sex")
# initialize a plot of high_use and internet
g1 <- ggplot(alc, aes(x = high_use, y = Fedu))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("sex")
# initialize a plot of high_use and internet
g1 <- ggplot(alc, aes(x = high_use, y = studytime))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("sex")
# initialize a plot of high_use and internet
g1 <- ggplot(alc, aes(x = high_use, y = freetime))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("sex")
# initialize a plot of high_use and internet
g1 <- ggplot(alc, aes(x = high_use, y = famsup))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("sex")
# initialize a plot of high_use and internet
g1 <- ggplot(alc, aes(x = high_use, y = failures))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("sex")
# initialize a plot of high_use and internet
g1 <- ggplot(alc, aes(x = high_use, y = studytime))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("sex")
# initialize a plot of high_use and internet
g1 <- ggplot(alc, aes(x = high_use, y = sex))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("sex")
plot(high_use ~ sex)
plot(alc$high_use ~ sex)
plot(alc$high_use ~ alc$sex)
# define the plot as a boxplot and draw it
g1
# initialize a plot of high_use and internet
g1 <- ggplot(alc, aes(x = high_use, y = sex))
# define the plot as a boxplot and draw it
g1
# initialize a plot of high_use and internet
g1 <- ggplot(alc, aes(x = alc_use, y = sex))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("sex")
# define the plot as a boxplot and draw it
g1 + ggplot() + ylab("sex")
# initialize a plot of high_use and internet
g1 <- ggplot(alc, aes(x = alc_use, y = freetime))
# define the plot as a boxplot and draw it
g1 + ggplot() + ylab("sex")
# initialize a plot of high_use and internet
g1 <- ggplot(alc, aes(x = alc_use, y = famrel))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("sex")
# initialize a plot of high_use and internet
g1 <- ggplot(alc, aes(x = high_use, y = famrel))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("sex")
# produce summary statistics by group
alc %>% group_by(high_use) %>% summarise(count = n(), famrel = mean(famrel), goout = mean(goout), absences = mean(absences), mean_grade = mean(G3))
# find the model with glm()
m <- glm(high_use ~ famrel + goout + absences + G3, data = alc, family = "binomial")
# print out a summary of the model
summary(m)
# print out the coefficients of the model
coef(m)
# print out the coefficients of the model
coef(m)
# find the model with glm()
m <- glm(high_use ~ famrel + goout + absences + G3, data = alc, family = "binomial")
# print out a summary of the model
summary(m)
# print out the coefficients of the model
coef(m)
# compute odds ratios (OR)
OR <- coef(m) %>% exp
# compute confidence intervals (CI)
CI <- exp(confint(m))
# print out the odds ratios with their confidence intervals
cbind(OR, CI)
# find the model with glm()
m2 <- glm(high_use ~ famrel + goout + absences, data = alc, family = "binomial")
# print out a summary of the model
summary(m2)
# print out the coefficients of the model
coef(m2)
# compute odds ratios (OR)
OR <- coef(m) %>% exp
# compute confidence intervals (CI)
CI <- exp(confint(m))
# print out the odds ratios with their confidence intervals
cbind(OR, CI)
# find the model with glm()
m <- glm(high_use ~ famrel + goout + absences + G3, data = alc, family = "binomial")
# print out a summary of the model
summary(m)
# print out the coefficients of the model
coef(m)
# compute odds ratios (OR)
OR <- coef(m) %>% exp
# compute confidence intervals (CI)
CI <- exp(confint(m))
# print out the odds ratios with their confidence intervals
cbind(OR, CI)
# find the model with glm()
m2 <- glm(high_use ~ famrel + goout + absences, data = alc, family = "binomial")
# print out a summary of the model
summary(m2)
# print out the coefficients of the model
coef(m2)
# compute odds ratios (OR)
OR <- coef(m2) %>% exp
# compute confidence intervals (CI)
CI <- exp(confint(m2))
# print out the odds ratios with their confidence intervals
cbind(OR, CI)
# find the model with glm()
m <- glm(high_use ~ famrel + goout + absences + G3, data = alc, family = "binomial")
# print out a summary of the model
summary(m)
# print out the coefficients of the model
coef(m)
# compute odds ratios (OR)
OR <- coef(m) %>% exp
# compute confidence intervals (CI)
CI <- exp(confint(m))
# print out the odds ratios with their confidence intervals
cbind(OR, CI)
# find the model with glm()
m2 <- glm(high_use ~ famrel + goout + absences, data = alc, family = "binomial")
# print out a summary of the model
summary(m2)
# print out the coefficients of the model
coef(m2)
# compute odds ratios (OR)
OR2 <- coef(m2) %>% exp
# compute confidence intervals (CI)
CI2 <- exp(confint(m2))
# print out the odds ratios with their confidence intervals
cbind(OR2, CI2)
# find the model with glm()
m2 <- glm(high_use ~ famrel + goout + absences, data = alc, family = "binomial")
# print out a summary of the model
summary(m2)
# print out the coefficients of the model
coef(m2)
# predict() the probability of high_use
probabilities <- predict(m2, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# see the last ten original classes, predicted probabilities, and class predictions
select(alc, famrel, goout, absences, high_use, probability, prediction) %>% tail(10)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
# initialize a plot of 'high_use' versus 'probability' in 'alc'
g <- ggplot(alc, aes(x = probability, y = high_use, col = prediction))
# define the geom as points and draw the plot
g + geom_point()
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction) %>% prop.table %>% addmargins
# find the model with glm()
m <- glm(high_use ~ famrel + goout + absences + G3, data = alc, family = "binomial")
# print out a summary of the model
summary(m)
# print out the coefficients of the model
coef(m)
# compute odds ratios (OR)
OR <- coef(m) %>% exp
# compute confidence intervals (CI)
CI <- exp(confint(m))
# print out the odds ratios with their confidence intervals
cbind(OR, CI)
# find the model with glm()
m2 <- glm(high_use ~ famrel + goout + absences, data = alc, family = "binomial")
# print out a summary of the model
summary(m2)
m2 <- glm(high_use ~ famrel + goout + absences, data = alc, family = "binomial")
# print out a summary of the model
summary(m2)
# print out the coefficients of the model
coef(m2)
# predict() the probability of high_use
probabilities <- predict(m2, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# see the last ten original classes, predicted probabilities, and class predictions
select(alc, famrel, goout, absences, high_use, probability, prediction) %>% tail(10)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
# initialize a plot of 'high_use' versus 'probability' in 'alc'
g <- ggplot(alc, aes(x = probability, y = high_use, col = prediction))
# define the geom as points and draw the plot
g + geom_point()
# tabulate the target variable versus the predictions
table(high_u
library(boot)
# define a loss function (average prediction error)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
# compute the average number of wrong predictions in the (training) data
loss_func(alc$high_use, alc$probability)
# K-fold cross-validation
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m2, K = 10)
# average number of wrong predictions in the cross validation
cv$delta[1]
library(boot)
# define a loss function (average prediction error)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
# compute the average number of wrong predictions in the (training) data
loss_func(alc$high_use, alc$probability)
# K-fold cross-validation
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m2, K = 10)
# average number of wrong predictions in the cross validation
cv$delta[1]
# K-fold cross-validation
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m2, K = 10)
# average number of wrong predictions in the cross validation
cv$delta[1]
# average number of wrong predictions in the cross validation
cv$delta[1]
# average number of wrong predictions in the cross validation
cv$delta[1]
